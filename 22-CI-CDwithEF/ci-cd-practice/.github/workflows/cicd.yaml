name: Continuous Integration Deploy

on:
  push:
    branches:
      - main

env:
  DOTNET_VERSION: '6.0.x'
  AZURE_WEBAPP_NAME: cicdtest-dotnet-linux

jobs:
#   scan:
#     name: Scan Code
#     runs-on: windows-2022
#     steps:
#       - name: Set up JDK 11
#         uses: actions/setup-java@v1
#         with:
#           java-version: 1.11
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
#       - name: Cache SonarCloud packages
#         uses: actions/cache@v1
#         with:
#           path: ~\sonar\cache
#           key: ${{ runner.os }}-sonar
#           restore-keys: ${{ runner.os }}-sonar
#       - name: Cache SonarCloud scanner
#         id: cache-sonar-scanner
#         uses: actions/cache@v1
#         with:
#           path: .\.sonar\scanner
#           key: ${{ runner.os }}-sonar-scanner
#           restore-keys: ${{ runner.os }}-sonar-scanner
#       - name: Install SonarCloud scanner
#         if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
#         shell: powershell
#         run: |
#           New-Item -Path .\.sonar\scanner -ItemType Directory
#           dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
#       - name: Build and analyze
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
#         shell: powershell
#         run: |
#           .\.sonar\scanner\dotnet-sonarscanner begin /k:"FabianToledo_ci-cd-practice" /o:"fabiantoledo" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
#           dotnet build -c Release
#           .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  build:
    name: Build
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Setup .net 6
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      # We can download a container and spin it up in the middle of the ci/cd chain as a step
      - name: Start SQL server
        run: docker run -d -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=P4ss#w0rd" -e "MSSQL_PID=Express" -p 1433:1433 mcr.microsoft.com/mssql/server:2019-latest

      - name: Sleep for 5 seconds to wait for SQL server to start.
        run: sleep 5s
        shell: bash

      - name: Restore dependencies
        run: dotnet restore
      
      - name: Build Release App
        run: dotnet build -c Release --no-restore

      - name: Run automated tests
        env:
          ConnectionStrings__DefaultConnection: Server=localhost,1433;Database=CiCdDemoTest;User=sa;Password=P4ss#w0rd
        run: dotnet test -c Release --no-build

      - name: Publish Release
        run: dotnet publish ./AnimalCountingDatabase -c Release -o ./out

      # - name: Deploy to Azure Web App
      #   uses: azure/webapps-deploy@v2
      #   with:
      #     app-name: ${{ env.AZURE_WEBAPP_NAME }}
      #     publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_SECRET }}
      #     package: ./out
